%implements s51_b0_c1dgk_4_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl
real_T lambda_c;
real_T rtu_n_0;
%closefile localVarDecl
%assign _modelSS = ""

/* MATLAB Function 'Thruster control /Thruster 2/Propeller Hydrodynamics/Actual Force and Torque': '<S73>:1' */
/* '<S73>:1:3' */
lambda_c = tanh(rtu_eps_c * rtu_n / 5.0) * 0.5 + 0.5;
/*  Smooth switching between positive and negative thrust. 5 makes switch happen between -5 and 5 */
/* '<S73>:1:4' */
/* '<S73>:1:5' */
/* '<S73>:1:7' */
if (rtu_n < 0.0) {
    rtu_n_0 = -1.0;
} else if (rtu_n > 0.0) {
    rtu_n_0 = 1.0;
} else if (rtu_n == 0.0) {
    rtu_n_0 = 0.0;
} else {
    rtu_n_0 = rtu_n;
}
%if SLibCG_FcnCallArgAccessed(4,1,0,0)
%<SLibCG_AccessArg(4 ,1, 7)>
%endif
%if SLibCG_FcnCallArgAccessed(4,1,0,2)
%<SLibCG_AccessArg(4 ,1, 0)>
%endif

localB->Ta = ((1.0 - lambda_c) * rtu_Ktr + rtu_Kt * lambda_c) * rtu_n_0 * rtu_Rho * %<(SLibCGCallSubFcn("rt_powd_snf", ["rtu_D", "4.0", "%<tSimStruct>"], 4, 1, 0))> * (rtu_n * rtu_n) - rtu_env;
/* '<S73>:1:8' */
if (rtu_n < 0.0) {
    rtu_n_0 = -1.0;
} else if (rtu_n > 0.0) {
    rtu_n_0 = 1.0;
} else if (rtu_n == 0.0) {
    rtu_n_0 = 0.0;
} else {
    rtu_n_0 = rtu_n;
}
%if SLibCG_FcnCallArgAccessed(4,1,1,0)
%<SLibCG_AccessArg(4 ,1, 7)>
%endif
%if SLibCG_FcnCallArgAccessed(4,1,1,2)
%<SLibCG_AccessArg(4 ,1, 0)>
%endif

localB->Qa = ((1.0 - lambda_c) * rtu_Kqr + rtu_Kq * lambda_c) * rtu_n_0 * rtu_Rho * %<(SLibCGCallSubFcn("rt_powd_snf", ["rtu_D", "5.0", "%<tSimStruct>"], 4, 1, 1))> * (rtu_n * rtu_n) - rtu_env;
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[4].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, SLibSystemFcnPeriodicRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(4, 1, 0)>
%endif
%if SLibCG_ArgAccessed(4, 1, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, SLibSystemFcnPeriodicRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface))
%<SLibCG_UndoAccessArg(4, 1, 0)>
%endif
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custo_ActualForceandTorque(\
%assign comma = ""
%if SLibCG_ArgAccessed(4, 1, 0)
%<comma>%<tSimStructType> * const %<tSimStruct>\
%assign comma = ", "
%endif
%<comma>real_T rtu_n\
%assign comma = ", "
%<comma>real_T rtu_Kq\
%assign comma = ", "
%<comma>real_T rtu_Kt\
%assign comma = ", "
%<comma>real_T rtu_Ktr\
%assign comma = ", "
%<comma>real_T rtu_Kqr\
%assign comma = ", "
%<comma>real_T rtu_Rho\
%assign comma = ", "
%if SLibCG_ArgAccessed(4, 1, 7)
%<comma>real_T rtu_D\
%assign comma = ", "
%endif
%<comma>real_T rtu_eps_c\
%assign comma = ", "
%<comma>real_T rtu_env\
%assign comma = ", "
%<comma>B_ActualForceandTorque_ctrl_c_T *localB\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(4, 1, fcnProtoType)>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
