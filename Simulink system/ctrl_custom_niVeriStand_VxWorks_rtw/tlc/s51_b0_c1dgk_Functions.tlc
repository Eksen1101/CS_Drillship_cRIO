%implements s51_b0_c1dgk_Functions "C"

%function rt_roundd_snf_Fcn0(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T y;
if (fabs(u) < 4.503599627370496E+15) {
    if (u >= 0.5) {
        y = floor(u + 0.5);
    } else if (u > -0.5) {
        y = u * 0.0;
    } else {
        y = ceil(u - 0.5);
    }
} else {
    y = u;
}
return y;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
extern real_T rt_roundd_snf(\
%assign comma = ""
%<comma>real_T u\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 0, fcnProtoType)>
%return fcnBuff
%endfunction

%function rt_remd_snf_Fcn1(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T y;
real_T u1_0;
if (!((!rtIsNaN(u0)) && (!rtIsInf(u0)) && ((!rtIsNaN(u1)) && (!rtIsInf(u1))))) {
    y = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
} else {
    if (u1 < 0.0) {
        u1_0 = ceil(u1);
    } else {
        u1_0 = floor(u1);
    }
    if ((u1 != 0.0) && (u1 != u1_0)) {
        u1_0 = u0 / u1;
        if (fabs(u1_0 - %<(SLibCGCallSubFcn("rt_roundd_snf", ["u1_0"], 6, 1, 0))>) <= DBL_EPSILON * fabs(u1_0)) {
            y = 0.0;
        } else {
            y = fmod(u0, u1);
        }
    } else {
        y = fmod(u0, u1);
    }
}
return y;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
extern real_T rt_remd_snf(\
%assign comma = ""
%<comma>real_T u0\
%assign comma = ", "
%<comma>real_T u1\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 1, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_diag_Fcn2(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T j;
memset(&d[0], 0, 36U * sizeof(real_T));
for (j = 0; j < 6; j++) {
    d[j + 6 * j] = v[j];
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_diag(\
%assign comma = ""
%<comma>const real_T v[6]\
%assign comma = ", "
%<comma>real_T d[36]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 2, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xnrm2_Fcn3(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T y;
real_T scale;
int32_T kend;
real_T absxk;
real_T t;
int32_T k;
y = 0.0;
if (n == 1) {
    y = fabs(x[ix0 - 1]);
} else {
    scale = 2.2250738585072014E-308;
    kend = (ix0 + n) - 1;
    for (k = ix0; k <= kend; k++) {
        absxk = fabs(x[k - 1]);
        if (absxk > scale) {
            t = scale / absxk;
            y = y * t * t + 1.0;
            scale = absxk;
        } else {
            t = absxk / scale;
            y += t * t;
        }
    }
    y = scale * sqrt(y);
}
return y;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static real_T ctrl_custom_xnrm2(\
%assign comma = ""
%<comma>int32_T n\
%assign comma = ", "
%<comma>const real_T x[18]\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 3, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xnrm2_k_Fcn4(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T y;
real_T scale;
int32_T kend;
real_T absxk;
real_T t;
int32_T k;
y = 0.0;
scale = 2.2250738585072014E-308;
kend = (ix0 + n) - 1;
for (k = ix0; k <= kend; k++) {
    absxk = fabs(x[k - 1]);
    if (absxk > scale) {
        t = scale / absxk;
        y = y * t * t + 1.0;
        scale = absxk;
    } else {
        t = absxk / scale;
        y += t * t;
    }
}
return scale * sqrt(y);
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static real_T ctrl_custom_xnrm2_k(\
%assign comma = ""
%<comma>int32_T n\
%assign comma = ", "
%<comma>const real_T x[6]\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 4, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xaxpy_a2_Fcn5(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T ix;
int32_T iy;
int32_T k;
if (!((n < 1) || (a == 0.0))) {
    ix = ix0 - 1;
    iy = iy0 - 1;
    for (k = 0; k < n; k++) {
        y[iy] += a * x[ix];
        ix++;
        iy++;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_xaxpy_a2(\
%assign comma = ""
%<comma>int32_T n\
%assign comma = ", "
%<comma>real_T a\
%assign comma = ", "
%<comma>const real_T x[3]\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%<comma>real_T y[18]\
%assign comma = ", "
%<comma>int32_T iy0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 5, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xaxpy_a_Fcn6(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T ix;
int32_T iy;
int32_T k;
if (!((n < 1) || (a == 0.0))) {
    ix = ix0 - 1;
    iy = iy0 - 1;
    for (k = 0; k < n; k++) {
        y[iy] += a * x[ix];
        ix++;
        iy++;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_xaxpy_a(\
%assign comma = ""
%<comma>int32_T n\
%assign comma = ", "
%<comma>real_T a\
%assign comma = ", "
%<comma>const real_T x[18]\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%<comma>real_T y[3]\
%assign comma = ", "
%<comma>int32_T iy0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 6, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xscal_Fcn7(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T k;
for (k = ix0; k <= ix0 + 2; k++) {
    x[k - 1] *= a;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_xscal(\
%assign comma = ""
%<comma>real_T a\
%assign comma = ", "
%<comma>real_T x[9]\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 7, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xscal_i_Fcn8(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T k;
for (k = ix0; k <= ix0 + 5; k++) {
    x[k - 1] *= a;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_xscal_i(\
%assign comma = ""
%<comma>real_T a\
%assign comma = ", "
%<comma>real_T x[36]\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 8, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xswap_Fcn9(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T ix;
int32_T iy;
real_T temp;
int32_T k;
ix = ix0 - 1;
iy = iy0 - 1;
for (k = 0; k < 6; k++) {
    temp = x[ix];
    x[ix] = x[iy];
    x[iy] = temp;
    ix++;
    iy++;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_xswap(\
%assign comma = ""
%<comma>real_T x[36]\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%<comma>int32_T iy0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 9, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xswap_c_Fcn10(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T ix;
int32_T iy;
real_T temp;
ix = ix0 - 1;
iy = iy0 - 1;
temp = x[ix];
x[ix] = x[iy];
x[iy] = temp;
ix++;
iy++;
temp = x[ix];
x[ix] = x[iy];
x[iy] = temp;
ix++;
iy++;
temp = x[ix];
x[ix] = x[iy];
x[iy] = temp;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_xswap_c(\
%assign comma = ""
%<comma>real_T x[9]\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%<comma>int32_T iy0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 10, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xrotg_Fcn11(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T roe;
real_T absa;
real_T absb;
real_T scale;
real_T ads;
real_T bds;
roe = *b;
absa = fabs(*a);
absb = fabs(*b);
if (absa > absb) {
    roe = *a;
}
scale = absa + absb;
if (scale == 0.0) {
    *s = 0.0;
    *c = 1.0;
    scale = 0.0;
    absa = 0.0;
} else {
    ads = absa / scale;
    bds = absb / scale;
    scale *= sqrt(ads * ads + bds * bds);
    if (roe < 0.0) {
        scale = -scale;
    }
    *c = *a / scale;
    *s = *b / scale;
    if (absa > absb) {
        absa = *s;
    } else if (*c != 0.0) {
        absa = 1.0 / *c;
    } else {
        absa = 1.0;
    }
}
*a = scale;
*b = absa;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_xrotg(\
%assign comma = ""
%<comma>real_T *a\
%assign comma = ", "
%<comma>real_T *b\
%assign comma = ", "
%<comma>real_T *c\
%assign comma = ", "
%<comma>real_T *s\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 11, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xrot_Fcn12(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T ix;
int32_T iy;
real_T temp;
int32_T k;
ix = ix0 - 1;
iy = iy0 - 1;
for (k = 0; k < 6; k++) {
    temp = c * x[ix] + s * x[iy];
    x[iy] = c * x[iy] - s * x[ix];
    x[ix] = temp;
    iy++;
    ix++;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_xrot(\
%assign comma = ""
%<comma>real_T x[36]\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%<comma>int32_T iy0\
%assign comma = ", "
%<comma>real_T c\
%assign comma = ", "
%<comma>real_T s\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 12, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xrot_n_Fcn13(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T ix;
int32_T iy;
real_T temp;
ix = ix0 - 1;
iy = iy0 - 1;
temp = c * x[ix] + s * x[iy];
x[iy] = c * x[iy] - s * x[ix];
x[ix] = temp;
iy++;
ix++;
temp = c * x[ix] + s * x[iy];
x[iy] = c * x[iy] - s * x[ix];
x[ix] = temp;
iy++;
ix++;
temp = c * x[ix] + s * x[iy];
x[iy] = c * x[iy] - s * x[ix];
x[ix] = temp;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_xrot_n(\
%assign comma = ""
%<comma>real_T x[9]\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%<comma>int32_T iy0\
%assign comma = ", "
%<comma>real_T c\
%assign comma = ", "
%<comma>real_T s\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 13, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xdotc_ls_Fcn14(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T d;
int32_T ix;
int32_T iy;
int32_T k;
d = 0.0;
if (!(n < 1)) {
    ix = ix0;
    iy = iy0;
    for (k = 1; k <= n; k++) {
        d += x[ix - 1] * y[iy - 1];
        ix++;
        iy++;
    }
}
return d;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static real_T ctrl_custom_xdotc_ls(\
%assign comma = ""
%<comma>int32_T n\
%assign comma = ", "
%<comma>const real_T x[36]\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%<comma>const real_T y[36]\
%assign comma = ", "
%<comma>int32_T iy0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 14, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xaxpy_a2fb_Fcn15(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T ix;
int32_T iy;
int32_T k;
if (!((n < 1) || (a == 0.0))) {
    ix = ix0 - 1;
    iy = iy0 - 1;
    for (k = 0; k < n; k++) {
        y[iy] += a * y[ix];
        ix++;
        iy++;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_xaxpy_a2fb(\
%assign comma = ""
%<comma>int32_T n\
%assign comma = ", "
%<comma>real_T a\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%<comma>real_T y[36]\
%assign comma = ", "
%<comma>int32_T iy0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 15, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xdotc_l_Fcn16(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T d;
int32_T ix;
int32_T iy;
int32_T k;
d = 0.0;
ix = ix0;
iy = iy0;
for (k = 1; k <= n; k++) {
    d += x[ix - 1] * y[iy - 1];
    ix++;
    iy++;
}
return d;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static real_T ctrl_custom_xdotc_l(\
%assign comma = ""
%<comma>int32_T n\
%assign comma = ", "
%<comma>const real_T x[9]\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%<comma>const real_T y[9]\
%assign comma = ", "
%<comma>int32_T iy0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 16, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xaxpy_a2f_Fcn17(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T ix;
int32_T iy;
int32_T k;
if (!(a == 0.0)) {
    ix = ix0 - 1;
    iy = iy0 - 1;
    for (k = 0; k < n; k++) {
        y[iy] += a * y[ix];
        ix++;
        iy++;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_xaxpy_a2f(\
%assign comma = ""
%<comma>int32_T n\
%assign comma = ", "
%<comma>real_T a\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%<comma>real_T y[9]\
%assign comma = ", "
%<comma>int32_T iy0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 17, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xdotc_Fcn18(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T d;
int32_T ix;
int32_T iy;
int32_T k;
d = 0.0;
ix = ix0;
iy = iy0;
for (k = 1; k <= n; k++) {
    d += x[ix - 1] * y[iy - 1];
    ix++;
    iy++;
}
return d;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static real_T ctrl_custom_xdotc(\
%assign comma = ""
%<comma>int32_T n\
%assign comma = ", "
%<comma>const real_T x[18]\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%<comma>const real_T y[18]\
%assign comma = ", "
%<comma>int32_T iy0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 18, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xaxpy_Fcn19(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T ix;
int32_T iy;
int32_T k;
if (!(a == 0.0)) {
    ix = ix0 - 1;
    iy = iy0 - 1;
    for (k = 0; k < n; k++) {
        y[iy] += a * y[ix];
        ix++;
        iy++;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_xaxpy(\
%assign comma = ""
%<comma>int32_T n\
%assign comma = ", "
%<comma>real_T a\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%<comma>real_T y[18]\
%assign comma = ", "
%<comma>int32_T iy0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 19, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_svd_h_Fcn20(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T b_A[18];
real_T s[4];
real_T e[6];
real_T work[3];
real_T Vf[36];
int32_T q;
boolean_T apply_transform;
int32_T m;
real_T snorm;
real_T ztest0;
int32_T kase;
int32_T qs;
real_T ztest;
real_T smm1;
real_T emm1;
real_T sqds;
real_T shift;
int32_T k_ii;
real_T varargin_1[5];
int32_T i;
boolean_T exitg1;
boolean_T exitg2;
int32_T exitg3;
%assign _modelSS = ""

memcpy(&b_A[0], &A[0], 18U * sizeof(real_T));
for (i = 0; i < 6; i++) {
    e[i] = 0.0;
}
work[0] = 0.0;
work[1] = 0.0;
work[2] = 0.0;
memset(&U[0], 0, 9U * sizeof(real_T));
memset(&Vf[0], 0, 36U * sizeof(real_T));
i = 0;
apply_transform = false;
snorm = %<(SLibCGCallSubFcn("ctrl_custom_xnrm2", ["3", "b_A", "1"], 6, 20, 15))>;
if (snorm > 0.0) {
    apply_transform = true;
    if (b_A[0] < 0.0) {
        s[0] = -snorm;
    } else {
        s[0] = snorm;
    }
    if (fabs(s[0]) >= 1.0020841800044864E-292) {
        snorm = 1.0 / s[0];
        for (qs = 0; qs + 1 < 4; qs++) {
            b_A[qs] *= snorm;
        }
    } else {
        for (qs = 0; qs + 1 < 4; qs++) {
            b_A[qs] /= s[0];
        }
    }
    b_A[0]++;
    s[0] = -s[0];
} else {
    s[0] = 0.0;
}
for (q = 1; q + 1 < 7; q++) {
    qs = 3 * q;
    if (apply_transform) {
        %<(SLibCGCallSubFcn("ctrl_custom_xaxpy", ["3", "-(%<(SLibCGCallSubFcn("ctrl_custom_xdotc", ["3", "b_A", "1", "b_A", "qs + 1"], 6, 20, 17))> / b_A[0])", "1", "b_A", "qs + 1"], 6, 20, 18))>;
    }
    e[q] = b_A[qs];
}
while (i + 1 < 4) {
    U[i] = b_A[i];
    i++;
}
snorm = %<(SLibCGCallSubFcn("ctrl_custom_xnrm2_k", ["5", "e", "2"], 6, 20, 16))>;
if (snorm == 0.0) {
    e[0] = 0.0;
} else {
    if (e[1] < 0.0) {
        e[0] = -snorm;
    } else {
        e[0] = snorm;
    }
    snorm = e[0];
    if (fabs(e[0]) >= 1.0020841800044864E-292) {
        snorm = 1.0 / e[0];
        for (i = 1; i + 1 < 7; i++) {
            e[i] *= snorm;
        }
    } else {
        for (i = 1; i + 1 < 7; i++) {
            e[i] /= snorm;
        }
    }
    e[1]++;
    e[0] = -e[0];
    for (i = 1; i + 1 < 4; i++) {
        work[i] = 0.0;
    }
    for (i = 1; i + 1 < 7; i++) {
        %<(SLibCGCallSubFcn("ctrl_custom_xaxpy_a", ["2", "e[i]", "b_A", "3 * i + 2", "work", "2"], 6, 20, 19))>;
    }
    for (i = 1; i + 1 < 7; i++) {
        %<(SLibCGCallSubFcn("ctrl_custom_xaxpy_a2", ["2", "-e[i] / e[1]", "work", "2", "b_A", "3 * i + 2"], 6, 20, 20))>;
    }
}
for (i = 1; i + 1 < 7; i++) {
    Vf[i] = e[i];
}
apply_transform = false;
snorm = %<(SLibCGCallSubFcn("ctrl_custom_xnrm2", ["2", "b_A", "5"], 6, 20, 21))>;
if (snorm > 0.0) {
    apply_transform = true;
    if (b_A[4] < 0.0) {
        s[1] = -snorm;
    } else {
        s[1] = snorm;
    }
    if (fabs(s[1]) >= 1.0020841800044864E-292) {
        snorm = 1.0 / s[1];
        for (qs = 4; qs + 1 < 7; qs++) {
            b_A[qs] *= snorm;
        }
    } else {
        for (qs = 4; qs + 1 < 7; qs++) {
            b_A[qs] /= s[1];
        }
    }
    b_A[4]++;
    s[1] = -s[1];
} else {
    s[1] = 0.0;
}
for (q = 2; q + 1 < 7; q++) {
    qs = 3 * q + 1;
    if (apply_transform) {
        %<(SLibCGCallSubFcn("ctrl_custom_xaxpy", ["2", "-(%<(SLibCGCallSubFcn("ctrl_custom_xdotc", ["2", "b_A", "5", "b_A", "qs + 1"], 6, 20, 23))> / b_A[4])", "5", "b_A", "qs + 1"], 6, 20, 24))>;
    }
    e[q] = b_A[qs];
}
for (i = 1; i + 1 < 4; i++) {
    U[i + 3] = b_A[i + 3];
}
snorm = %<(SLibCGCallSubFcn("ctrl_custom_xnrm2_k", ["4", "e", "3"], 6, 20, 22))>;
if (snorm == 0.0) {
    e[1] = 0.0;
} else {
    if (e[2] < 0.0) {
        e[1] = -snorm;
    } else {
        e[1] = snorm;
    }
    snorm = e[1];
    if (fabs(e[1]) >= 1.0020841800044864E-292) {
        snorm = 1.0 / e[1];
        for (i = 2; i + 1 < 7; i++) {
            e[i] *= snorm;
        }
    } else {
        for (i = 2; i + 1 < 7; i++) {
            e[i] /= snorm;
        }
    }
    e[2]++;
    e[1] = -e[1];
    for (i = 2; i + 1 < 4; i++) {
        work[i] = 0.0;
    }
    for (i = 2; i + 1 < 7; i++) {
        %<(SLibCGCallSubFcn("ctrl_custom_xaxpy_a", ["1", "e[i]", "b_A", "3 * i + 3", "work", "3"], 6, 20, 25))>;
    }
    for (i = 2; i + 1 < 7; i++) {
        %<(SLibCGCallSubFcn("ctrl_custom_xaxpy_a2", ["1", "-e[i] / e[2]", "work", "3", "b_A", "3 * i + 3"], 6, 20, 26))>;
    }
}
for (i = 2; i + 1 < 7; i++) {
    Vf[i + 6] = e[i];
}
for (q = 3; q + 1 < 7; q++) {
    e[q] = b_A[3 * q + 2];
}
snorm = %<(SLibCGCallSubFcn("ctrl_custom_xnrm2_k", ["3", "e", "4"], 6, 20, 27))>;
if (snorm == 0.0) {
    e[2] = 0.0;
} else {
    if (e[3] < 0.0) {
        e[2] = -snorm;
    } else {
        e[2] = snorm;
    }
    snorm = e[2];
    if (fabs(e[2]) >= 1.0020841800044864E-292) {
        snorm = 1.0 / e[2];
        for (i = 3; i + 1 < 7; i++) {
            e[i] *= snorm;
        }
    } else {
        for (i = 3; i + 1 < 7; i++) {
            e[i] /= snorm;
        }
    }
    e[3]++;
    e[2] = -e[2];
}
for (i = 3; i + 1 < 7; i++) {
    Vf[i + 12] = e[i];
}
m = 2;
s[2] = b_A[8];
s[3] = 0.0;
e[3] = 0.0;
U[6] = 0.0;
U[7] = 0.0;
U[8] = 1.0;
for (q = 1; q >= 0; q += -1) {
    i = 3 * q + q;
    if (s[q] != 0.0) {
        for (kase = q + 1; kase + 1 < 4; kase++) {
            qs = (3 * kase + q) + 1;
%if SLibCG_FcnCallArgAccessed(6,20,13,1)
%<SLibCG_AccessArg(6 ,20, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(6,20,13,3)
%<SLibCG_AccessArg(6 ,20, 1)>
%endif

%if SLibCG_FcnCallArgAccessed(6,20,14,1)
%<SLibCG_AccessArg(6 ,20, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(6,20,14,3)
%<SLibCG_AccessArg(6 ,20, 1)>
%endif

            %<(SLibCGCallSubFcn("ctrl_custom_xaxpy_a2f", ["3 - q", "-(%<(SLibCGCallSubFcn("ctrl_custom_xdotc_l", ["3 - q", "U", "i + 1", "U", "qs"], 6, 20, 13))> / U[i])", "i + 1", "U", "qs"], 6, 20, 14))>;
        }
        for (qs = q; qs + 1 < 4; qs++) {
            U[qs + 3 * q] = -U[3 * q + qs];
        }
        U[i]++;
        i = 1;
        while (i <= q) {
            U[3] = 0.0;
            i = 2;
        }
    } else {
        U[3 * q] = 0.0;
        U[1 + 3 * q] = 0.0;
        U[2 + 3 * q] = 0.0;
        U[i] = 1.0;
    }
}
for (i = 5; i >= 0; i += -1) {
    if ((i + 1 <= 3) && (e[i] != 0.0)) {
        q = (6 * i + i) + 2;
        for (qs = i + 1; qs + 1 < 7; qs++) {
            kase = (6 * qs + i) + 2;
            %<(SLibCGCallSubFcn("ctrl_custom_xaxpy_a2fb", ["5 - i", "-(%<(SLibCGCallSubFcn("ctrl_custom_xdotc_ls", ["5 - i", "Vf", "q", "Vf", "kase"], 6, 20, 11))> / Vf[q - 1])", "q", "Vf", "kase"], 6, 20, 12))>;
        }
    }
    for (q = 0; q < 6; q++) {
        Vf[q + 6 * i] = 0.0;
    }
    Vf[i + 6 * i] = 1.0;
}
ztest = e[0];
if (s[0] != 0.0) {
    ztest0 = fabs(s[0]);
    snorm = s[0] / ztest0;
    s[0] = ztest0;
    ztest = e[0] / snorm;
%if SLibCG_FcnCallArgAccessed(6,20,28,1)
%<SLibCG_AccessArg(6 ,20, 1)>
%endif

    %<(SLibCGCallSubFcn("ctrl_custom_xscal", ["snorm", "U", "1"], 6, 20, 28))>;
}
if (ztest != 0.0) {
    ztest0 = fabs(ztest);
    snorm = ztest0 / ztest;
    ztest = ztest0;
    s[1] *= snorm;
    %<(SLibCGCallSubFcn("ctrl_custom_xscal_i", ["snorm", "Vf", "7"], 6, 20, 29))>;
}
e[0] = ztest;
ztest = e[1];
if (s[1] != 0.0) {
    ztest0 = fabs(s[1]);
    snorm = s[1] / ztest0;
    s[1] = ztest0;
    ztest = e[1] / snorm;
%if SLibCG_FcnCallArgAccessed(6,20,30,1)
%<SLibCG_AccessArg(6 ,20, 1)>
%endif

    %<(SLibCGCallSubFcn("ctrl_custom_xscal", ["snorm", "U", "4"], 6, 20, 30))>;
}
if (ztest != 0.0) {
    ztest0 = fabs(ztest);
    snorm = ztest0 / ztest;
    ztest = ztest0;
    s[2] = b_A[8] * snorm;
    %<(SLibCGCallSubFcn("ctrl_custom_xscal_i", ["snorm", "Vf", "13"], 6, 20, 31))>;
}
e[1] = ztest;
ztest = e[2];
if (s[2] != 0.0) {
    ztest0 = fabs(s[2]);
    snorm = s[2] / ztest0;
    s[2] = ztest0;
    ztest = e[2] / snorm;
%if SLibCG_FcnCallArgAccessed(6,20,32,1)
%<SLibCG_AccessArg(6 ,20, 1)>
%endif

    %<(SLibCGCallSubFcn("ctrl_custom_xscal", ["snorm", "U", "7"], 6, 20, 32))>;
}
if (ztest != 0.0) {
    ztest0 = fabs(ztest);
    snorm = ztest0 / ztest;
    ztest = ztest0;
    s[3] = 0.0 * snorm;
    %<(SLibCGCallSubFcn("ctrl_custom_xscal_i", ["snorm", "Vf", "19"], 6, 20, 33))>;
}
e[2] = ztest;
e[3] = 0.0;
i = 0;
snorm = 0.0;
if ((s[0] >= e[0]) || rtIsNaN(e[0])) {
    ztest0 = s[0];
} else {
    ztest0 = e[0];
}
if (!((0.0 >= ztest0) || rtIsNaN(ztest0))) {
    snorm = ztest0;
}
if ((s[1] >= e[1]) || rtIsNaN(e[1])) {
    ztest0 = s[1];
} else {
    ztest0 = e[1];
}
if (!((snorm >= ztest0) || rtIsNaN(ztest0))) {
    snorm = ztest0;
}
if ((s[2] >= ztest) || rtIsNaN(ztest)) {
    ztest = s[2];
}
if (!((snorm >= ztest) || rtIsNaN(ztest))) {
    snorm = ztest;
}
if (s[3] >= 0.0) {
    ztest0 = s[3];
} else {
    ztest0 = 0.0;
}
if (!((snorm >= ztest0) || rtIsNaN(ztest0))) {
    snorm = ztest0;
}
while ((m + 2 > 0) && (!(i >= 75))) {
    kase = m + 1;
    do {
        exitg3 = 0;
        q = kase;
        if (kase == 0) {
            exitg3 = 1;
        } else {
            ztest0 = fabs(e[kase - 1]);
            if ((ztest0 <= (fabs(s[kase - 1]) + fabs(s[kase])) * 2.2204460492503131E-16) || ((ztest0 <= 1.0020841800044864E-292) || ((i > 20) && (ztest0 <= 2.2204460492503131E-16 * snorm)))) {
                e[kase - 1] = 0.0;
                exitg3 = 1;
            } else {
                kase--;
            }
        }
    } while (exitg3 == 0);
    if (m + 1 == kase) {
        kase = 4;
    } else {
        qs = m + 2;
        k_ii = m + 2;
        exitg2 = false;
        while ((!exitg2) && (k_ii >= kase)) {
            qs = k_ii;
            if (k_ii == kase) {
                exitg2 = true;
            } else {
                ztest0 = 0.0;
                if (k_ii < m + 2) {
                    ztest0 = fabs(e[k_ii - 1]);
                }
                if (k_ii > kase + 1) {
                    ztest0 += fabs(e[k_ii - 2]);
                }
                ztest = fabs(s[k_ii - 1]);
                if ((ztest <= 2.2204460492503131E-16 * ztest0) || (ztest <= 1.0020841800044864E-292)) {
                    s[k_ii - 1] = 0.0;
                    exitg2 = true;
                } else {
                    k_ii--;
                }
            }
        }
        if (qs == kase) {
            kase = 3;
        } else if (m + 2 == qs) {
            kase = 1;
        } else {
            kase = 2;
            q = qs;
        }
    }
    switch (kase) {
      case 1:
        ztest0 = e[m];
        e[m] = 0.0;
        for (qs = m; qs + 1 >= q + 1; qs--) {
            ztest = s[qs];
            %<(SLibCGCallSubFcn("ctrl_custom_xrotg", ["&ztest", "&ztest0", "&sqds", "&smm1"], 6, 20, 3))>;
            s[qs] = ztest;
            if (qs + 1 > q + 1) {
                ztest0 = e[qs - 1] * -smm1;
                e[qs - 1] *= sqds;
            }
            %<(SLibCGCallSubFcn("ctrl_custom_xrot", ["Vf", "1 + 6 * qs", "1 + 6 * (m + 1)", "sqds", "smm1"], 6, 20, 4))>;
        }
        break;
      case 2:
        ztest0 = e[q - 1];
        e[q - 1] = 0.0;
        for (qs = q; qs + 1 <= m + 2; qs++) {
            ztest = s[qs];
            %<(SLibCGCallSubFcn("ctrl_custom_xrotg", ["&ztest", "&ztest0", "&sqds", "&smm1"], 6, 20, 5))>;
            s[qs] = ztest;
            ztest0 = -smm1 * e[qs];
            e[qs] *= sqds;
%if SLibCG_FcnCallArgAccessed(6,20,6,0)
%<SLibCG_AccessArg(6 ,20, 1)>
%endif

            %<(SLibCGCallSubFcn("ctrl_custom_xrot_n", ["U", "1 + 3 * qs", "1 + 3 * (q - 1)", "sqds", "smm1"], 6, 20, 6))>;
        }
        break;
      case 3:
        varargin_1[0] = fabs(s[m + 1]);
        varargin_1[1] = fabs(s[m]);
        varargin_1[2] = fabs(e[m]);
        varargin_1[3] = fabs(s[q]);
        varargin_1[4] = fabs(e[q]);
        qs = 1;
        ztest = varargin_1[0];
        if (rtIsNaN(varargin_1[0])) {
            kase = 2;
            exitg1 = false;
            while ((!exitg1) && (kase < 6)) {
                qs = kase;
                if (!rtIsNaN(varargin_1[kase - 1])) {
                    ztest = varargin_1[kase - 1];
                    exitg1 = true;
                } else {
                    kase++;
                }
            }
        }
        if (qs < 5) {
            while (qs + 1 < 6) {
                if (varargin_1[qs] > ztest) {
                    ztest = varargin_1[qs];
                }
                qs++;
            }
        }
        ztest0 = s[m + 1] / ztest;
        smm1 = s[m] / ztest;
        emm1 = e[m] / ztest;
        sqds = s[q] / ztest;
        smm1 = ((smm1 + ztest0) * (smm1 - ztest0) + emm1 * emm1) / 2.0;
        emm1 *= ztest0;
        emm1 *= emm1;
        if ((smm1 != 0.0) || (emm1 != 0.0)) {
            shift = sqrt(smm1 * smm1 + emm1);
            if (smm1 < 0.0) {
                shift = -shift;
            }
            shift = emm1 / (smm1 + shift);
        } else {
            shift = 0.0;
        }
        ztest0 = (sqds + ztest0) * (sqds - ztest0) + shift;
        ztest = e[q] / ztest * sqds;
        for (qs = q + 1; qs <= m + 1; qs++) {
            %<(SLibCGCallSubFcn("ctrl_custom_xrotg", ["&ztest0", "&ztest", "&sqds", "&smm1"], 6, 20, 7))>;
            if (qs > q + 1) {
                e[qs - 2] = ztest0;
            }
            ztest0 = s[qs - 1] * sqds + e[qs - 1] * smm1;
            e[qs - 1] = e[qs - 1] * sqds - s[qs - 1] * smm1;
            ztest = smm1 * s[qs];
            s[qs] *= sqds;
            %<(SLibCGCallSubFcn("ctrl_custom_xrot", ["Vf", "1 + 6 * (qs - 1)", "1 + 6 * qs", "sqds", "smm1"], 6, 20, 8))>;
            %<(SLibCGCallSubFcn("ctrl_custom_xrotg", ["&ztest0", "&ztest", "&sqds", "&smm1"], 6, 20, 9))>;
            s[qs - 1] = ztest0;
            ztest0 = e[qs - 1] * sqds + smm1 * s[qs];
            s[qs] = e[qs - 1] * -smm1 + sqds * s[qs];
            ztest = smm1 * e[qs];
            e[qs] *= sqds;
            if (qs < 3) {
%if SLibCG_FcnCallArgAccessed(6,20,10,0)
%<SLibCG_AccessArg(6 ,20, 1)>
%endif

                %<(SLibCGCallSubFcn("ctrl_custom_xrot_n", ["U", "1 + 3 * (qs - 1)", "1 + 3 * qs", "sqds", "smm1"], 6, 20, 10))>;
            }
        }
        e[m] = ztest0;
        i++;
        break;
      default:
        if (s[q] < 0.0) {
            s[q] = -s[q];
            %<(SLibCGCallSubFcn("ctrl_custom_xscal_i", ["-1.0", "Vf", "1 + 6 * q"], 6, 20, 0))>;
        }
        i = q + 1;
        while ((q + 1 < 4) && (s[q] < s[i])) {
            ztest0 = s[q];
            s[q] = s[i];
            s[i] = ztest0;
            %<(SLibCGCallSubFcn("ctrl_custom_xswap", ["Vf", "1 + 6 * q", "1 + 6 * (q + 1)"], 6, 20, 1))>;
            if (q + 1 < 3) {
%if SLibCG_FcnCallArgAccessed(6,20,2,0)
%<SLibCG_AccessArg(6 ,20, 1)>
%endif

                %<(SLibCGCallSubFcn("ctrl_custom_xswap_c", ["U", "1 + 3 * q", "1 + 3 * (q + 1)"], 6, 20, 2))>;
            }
            q = i;
            i++;
        }
        i = 0;
        m--;
        break;
    }
}
for (m = 0; m < 3; m++) {
    work[m] = s[m];
    for (i = 0; i < 6; i++) {
        V[i + 6 * m] = Vf[6 * m + i];
    }
}
memset(&S[0], 0, 9U * sizeof(real_T));
S[0] = work[0];
S[4] = work[1];
S[8] = work[2];
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_svd_h(\
%assign comma = ""
%<comma>const real_T A[18]\
%assign comma = ", "
%<comma>real_T U[9]\
%assign comma = ", "
%<comma>real_T S[9]\
%assign comma = ", "
%<comma>real_T V[18]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 20, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_svd_Fcn21(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
boolean_T b_p;
int32_T k;
%assign _modelSS = ""

b_p = true;
for (k = 0; k < 18; k++) {
    if (b_p && ((!rtIsInf(A[k])) && (!rtIsNaN(A[k])))) {
    } else {
        b_p = false;
    }
}
if (b_p) {
%if SLibCG_FcnCallArgAccessed(6,21,0,0)
%<SLibCG_AccessArg(6 ,21, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(6,21,0,1)
%<SLibCG_AccessArg(6 ,21, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(6,21,0,2)
%<SLibCG_AccessArg(6 ,21, 2)>
%endif
%if SLibCG_FcnCallArgAccessed(6,21,0,3)
%<SLibCG_AccessArg(6 ,21, 3)>
%endif

    %<(SLibCGCallSubFcn("ctrl_custom_svd_h", ["A", "U", "S", "V"], 6, 21, 0))>;
} else {
    for (k = 0; k < 9; k++) {
        U[k] = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
        S[k] = 0.0;
    }
    S[0] = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
    S[4] = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
    S[8] = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
    for (k = 0; k < 18; k++) {
        V[k] = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_svd(\
%assign comma = ""
%<comma>const real_T A[18]\
%assign comma = ", "
%<comma>real_T U[9]\
%assign comma = ", "
%<comma>real_T S[9]\
%assign comma = ", "
%<comma>real_T V[18]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 21, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_isfinite_Fcn22(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T i;
for (i = 0; i < 9; i++) {
    b[i] = ((!rtIsInf(x[i])) && (!rtIsNaN(x[i])));
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_isfinite(\
%assign comma = ""
%<comma>const real_T x[9]\
%assign comma = ", "
%<comma>boolean_T b[9]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 22, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xnrm2_ky_Fcn23(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T y;
real_T scale;
int32_T kend;
real_T absxk;
real_T t;
int32_T k;
y = 0.0;
if (n == 1) {
    y = fabs(x[ix0 - 1]);
} else {
    scale = 2.2250738585072014E-308;
    kend = (ix0 + n) - 1;
    for (k = ix0; k <= kend; k++) {
        absxk = fabs(x[k - 1]);
        if (absxk > scale) {
            t = scale / absxk;
            y = y * t * t + 1.0;
            scale = absxk;
        } else {
            t = absxk / scale;
            y += t * t;
        }
    }
    y = scale * sqrt(y);
}
return y;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static real_T ctrl_custom_xnrm2_ky(\
%assign comma = ""
%<comma>int32_T n\
%assign comma = ", "
%<comma>const real_T x[36]\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 23, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xnrm2_kyb_Fcn24(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T y;
real_T scale;
int32_T kend;
real_T absxk;
real_T t;
int32_T k;
y = 0.0;
scale = 2.2250738585072014E-308;
kend = (ix0 + n) - 1;
for (k = ix0; k <= kend; k++) {
    absxk = fabs(x[k - 1]);
    if (absxk > scale) {
        t = scale / absxk;
        y = y * t * t + 1.0;
        scale = absxk;
    } else {
        t = absxk / scale;
        y += t * t;
    }
}
return scale * sqrt(y);
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static real_T ctrl_custom_xnrm2_kyb(\
%assign comma = ""
%<comma>int32_T n\
%assign comma = ", "
%<comma>const real_T x[12]\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 24, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xaxpy_a2fbjv1_Fcn25(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T ix;
int32_T iy;
int32_T k;
if (!((n < 1) || (a == 0.0))) {
    ix = ix0 - 1;
    iy = iy0 - 1;
    for (k = 0; k < n; k++) {
        y[iy] += a * x[ix];
        ix++;
        iy++;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_xaxpy_a2fbjv1(\
%assign comma = ""
%<comma>int32_T n\
%assign comma = ", "
%<comma>real_T a\
%assign comma = ", "
%<comma>const real_T x[3]\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%<comma>real_T y[36]\
%assign comma = ", "
%<comma>int32_T iy0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 25, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xaxpy_a2fbjv_Fcn26(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T ix;
int32_T iy;
int32_T k;
if (!((n < 1) || (a == 0.0))) {
    ix = ix0 - 1;
    iy = iy0 - 1;
    for (k = 0; k < n; k++) {
        y[iy] += a * x[ix];
        ix++;
        iy++;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_xaxpy_a2fbjv(\
%assign comma = ""
%<comma>int32_T n\
%assign comma = ", "
%<comma>real_T a\
%assign comma = ", "
%<comma>const real_T x[36]\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%<comma>real_T y[3]\
%assign comma = ", "
%<comma>int32_T iy0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 26, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xscal_ie_Fcn27(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T k;
for (k = ix0; k <= ix0 + 11; k++) {
    x[k - 1] *= a;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_xscal_ie(\
%assign comma = ""
%<comma>real_T a\
%assign comma = ", "
%<comma>real_T x[144]\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 27, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xswap_cs_Fcn28(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T ix;
int32_T iy;
real_T temp;
int32_T k;
ix = ix0 - 1;
iy = iy0 - 1;
for (k = 0; k < 12; k++) {
    temp = x[ix];
    x[ix] = x[iy];
    x[iy] = temp;
    ix++;
    iy++;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_xswap_cs(\
%assign comma = ""
%<comma>real_T x[144]\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%<comma>int32_T iy0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 28, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xrot_nd_Fcn29(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T ix;
int32_T iy;
real_T temp;
int32_T k;
ix = ix0 - 1;
iy = iy0 - 1;
for (k = 0; k < 12; k++) {
    temp = c * x[ix] + s * x[iy];
    x[iy] = c * x[iy] - s * x[ix];
    x[ix] = temp;
    iy++;
    ix++;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_xrot_nd(\
%assign comma = ""
%<comma>real_T x[144]\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%<comma>int32_T iy0\
%assign comma = ", "
%<comma>real_T c\
%assign comma = ", "
%<comma>real_T s\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 29, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xdotc_lsov_Fcn30(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T d;
int32_T ix;
int32_T iy;
int32_T k;
d = 0.0;
if (!(n < 1)) {
    ix = ix0;
    iy = iy0;
    for (k = 1; k <= n; k++) {
        d += x[ix - 1] * y[iy - 1];
        ix++;
        iy++;
    }
}
return d;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static real_T ctrl_custom_xdotc_lsov(\
%assign comma = ""
%<comma>int32_T n\
%assign comma = ", "
%<comma>const real_T x[144]\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%<comma>const real_T y[144]\
%assign comma = ", "
%<comma>int32_T iy0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 30, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xaxpy_a2fbjv1g_Fcn31(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T ix;
int32_T iy;
int32_T k;
if (!((n < 1) || (a == 0.0))) {
    ix = ix0 - 1;
    iy = iy0 - 1;
    for (k = 0; k < n; k++) {
        y[iy] += a * y[ix];
        ix++;
        iy++;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_xaxpy_a2fbjv1g(\
%assign comma = ""
%<comma>int32_T n\
%assign comma = ", "
%<comma>real_T a\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%<comma>real_T y[144]\
%assign comma = ", "
%<comma>int32_T iy0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 31, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xdotc_lso_Fcn32(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T d;
int32_T ix;
int32_T iy;
int32_T k;
d = 0.0;
ix = ix0;
iy = iy0;
for (k = 1; k <= n; k++) {
    d += x[ix - 1] * y[iy - 1];
    ix++;
    iy++;
}
return d;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static real_T ctrl_custom_xdotc_lso(\
%assign comma = ""
%<comma>int32_T n\
%assign comma = ", "
%<comma>const real_T x[36]\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%<comma>const real_T y[36]\
%assign comma = ", "
%<comma>int32_T iy0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 32, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_xaxpy_a2fbj_Fcn33(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T ix;
int32_T iy;
int32_T k;
if (!(a == 0.0)) {
    ix = ix0 - 1;
    iy = iy0 - 1;
    for (k = 0; k < n; k++) {
        y[iy] += a * y[ix];
        ix++;
        iy++;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_xaxpy_a2fbj(\
%assign comma = ""
%<comma>int32_T n\
%assign comma = ", "
%<comma>real_T a\
%assign comma = ", "
%<comma>int32_T ix0\
%assign comma = ", "
%<comma>real_T y[36]\
%assign comma = ", "
%<comma>int32_T iy0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 33, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_svd_hb2_Fcn34(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T b_A[36];
real_T s[4];
real_T e[12];
real_T work[3];
real_T Vf[144];
int32_T q;
boolean_T apply_transform;
int32_T m;
int32_T iter;
real_T snorm;
real_T ztest0;
int32_T kase;
int32_T qs;
real_T ztest;
real_T smm1;
real_T emm1;
real_T sqds;
real_T shift;
int32_T k_ii;
real_T varargin_1[5];
boolean_T exitg1;
boolean_T exitg2;
int32_T exitg3;
%assign _modelSS = ""

memcpy(&b_A[0], &A[0], 36U * sizeof(real_T));
memset(&e[0], 0, 12U * sizeof(real_T));
work[0] = 0.0;
work[1] = 0.0;
work[2] = 0.0;
memset(&U[0], 0, 9U * sizeof(real_T));
memset(&Vf[0], 0, 144U * sizeof(real_T));
iter = 0;
apply_transform = false;
snorm = %<(SLibCGCallSubFcn("ctrl_custom_xnrm2_ky", ["3", "b_A", "1"], 6, 34, 15))>;
if (snorm > 0.0) {
    apply_transform = true;
    if (b_A[0] < 0.0) {
        s[0] = -snorm;
    } else {
        s[0] = snorm;
    }
    if (fabs(s[0]) >= 1.0020841800044864E-292) {
        snorm = 1.0 / s[0];
        for (qs = 0; qs + 1 < 4; qs++) {
            b_A[qs] *= snorm;
        }
    } else {
        for (qs = 0; qs + 1 < 4; qs++) {
            b_A[qs] /= s[0];
        }
    }
    b_A[0]++;
    s[0] = -s[0];
} else {
    s[0] = 0.0;
}
for (q = 1; q + 1 < 13; q++) {
    qs = 3 * q;
    if (apply_transform) {
        %<(SLibCGCallSubFcn("ctrl_custom_xaxpy_a2fbj", ["3", "-(%<(SLibCGCallSubFcn("ctrl_custom_xdotc_lso", ["3", "b_A", "1", "b_A", "qs + 1"], 6, 34, 17))> / b_A[0])", "1", "b_A", "qs + 1"], 6, 34, 18))>;
    }
    e[q] = b_A[qs];
}
while (iter + 1 < 4) {
    U[iter] = b_A[iter];
    iter++;
}
snorm = %<(SLibCGCallSubFcn("ctrl_custom_xnrm2_kyb", ["11", "e", "2"], 6, 34, 16))>;
if (snorm == 0.0) {
    e[0] = 0.0;
} else {
    if (e[1] < 0.0) {
        e[0] = -snorm;
    } else {
        e[0] = snorm;
    }
    snorm = e[0];
    if (fabs(e[0]) >= 1.0020841800044864E-292) {
        snorm = 1.0 / e[0];
        for (iter = 1; iter + 1 < 13; iter++) {
            e[iter] *= snorm;
        }
    } else {
        for (iter = 1; iter + 1 < 13; iter++) {
            e[iter] /= snorm;
        }
    }
    e[1]++;
    e[0] = -e[0];
    for (iter = 1; iter + 1 < 4; iter++) {
        work[iter] = 0.0;
    }
    for (iter = 1; iter + 1 < 13; iter++) {
        %<(SLibCGCallSubFcn("ctrl_custom_xaxpy_a2fbjv", ["2", "e[iter]", "b_A", "3 * iter + 2", "work", "2"], 6, 34, 19))>;
    }
    for (iter = 1; iter + 1 < 13; iter++) {
        %<(SLibCGCallSubFcn("ctrl_custom_xaxpy_a2fbjv1", ["2", "-e[iter] / e[1]", "work", "2", "b_A", "3 * iter + 2"], 6, 34, 20))>;
    }
}
for (iter = 1; iter + 1 < 13; iter++) {
    Vf[iter] = e[iter];
}
apply_transform = false;
snorm = %<(SLibCGCallSubFcn("ctrl_custom_xnrm2_ky", ["2", "b_A", "5"], 6, 34, 21))>;
if (snorm > 0.0) {
    apply_transform = true;
    if (b_A[4] < 0.0) {
        s[1] = -snorm;
    } else {
        s[1] = snorm;
    }
    if (fabs(s[1]) >= 1.0020841800044864E-292) {
        snorm = 1.0 / s[1];
        for (qs = 4; qs + 1 < 7; qs++) {
            b_A[qs] *= snorm;
        }
    } else {
        for (qs = 4; qs + 1 < 7; qs++) {
            b_A[qs] /= s[1];
        }
    }
    b_A[4]++;
    s[1] = -s[1];
} else {
    s[1] = 0.0;
}
for (q = 2; q + 1 < 13; q++) {
    qs = 3 * q + 1;
    if (apply_transform) {
        %<(SLibCGCallSubFcn("ctrl_custom_xaxpy_a2fbj", ["2", "-(%<(SLibCGCallSubFcn("ctrl_custom_xdotc_lso", ["2", "b_A", "5", "b_A", "qs + 1"], 6, 34, 23))> / b_A[4])", "5", "b_A", "qs + 1"], 6, 34, 24))>;
    }
    e[q] = b_A[qs];
}
for (iter = 1; iter + 1 < 4; iter++) {
    U[iter + 3] = b_A[iter + 3];
}
snorm = %<(SLibCGCallSubFcn("ctrl_custom_xnrm2_kyb", ["10", "e", "3"], 6, 34, 22))>;
if (snorm == 0.0) {
    e[1] = 0.0;
} else {
    if (e[2] < 0.0) {
        e[1] = -snorm;
    } else {
        e[1] = snorm;
    }
    snorm = e[1];
    if (fabs(e[1]) >= 1.0020841800044864E-292) {
        snorm = 1.0 / e[1];
        for (iter = 2; iter + 1 < 13; iter++) {
            e[iter] *= snorm;
        }
    } else {
        for (iter = 2; iter + 1 < 13; iter++) {
            e[iter] /= snorm;
        }
    }
    e[2]++;
    e[1] = -e[1];
    for (iter = 2; iter + 1 < 4; iter++) {
        work[iter] = 0.0;
    }
    for (iter = 2; iter + 1 < 13; iter++) {
        %<(SLibCGCallSubFcn("ctrl_custom_xaxpy_a2fbjv", ["1", "e[iter]", "b_A", "3 * iter + 3", "work", "3"], 6, 34, 25))>;
    }
    for (iter = 2; iter + 1 < 13; iter++) {
        %<(SLibCGCallSubFcn("ctrl_custom_xaxpy_a2fbjv1", ["1", "-e[iter] / e[2]", "work", "3", "b_A", "3 * iter + 3"], 6, 34, 26))>;
    }
}
for (iter = 2; iter + 1 < 13; iter++) {
    Vf[iter + 12] = e[iter];
}
for (q = 3; q + 1 < 13; q++) {
    e[q] = b_A[3 * q + 2];
}
snorm = %<(SLibCGCallSubFcn("ctrl_custom_xnrm2_kyb", ["9", "e", "4"], 6, 34, 27))>;
if (snorm == 0.0) {
    e[2] = 0.0;
} else {
    if (e[3] < 0.0) {
        e[2] = -snorm;
    } else {
        e[2] = snorm;
    }
    snorm = e[2];
    if (fabs(e[2]) >= 1.0020841800044864E-292) {
        snorm = 1.0 / e[2];
        for (iter = 3; iter + 1 < 13; iter++) {
            e[iter] *= snorm;
        }
    } else {
        for (iter = 3; iter + 1 < 13; iter++) {
            e[iter] /= snorm;
        }
    }
    e[3]++;
    e[2] = -e[2];
}
for (iter = 3; iter + 1 < 13; iter++) {
    Vf[iter + 24] = e[iter];
}
m = 2;
s[2] = b_A[8];
s[3] = 0.0;
e[3] = 0.0;
U[6] = 0.0;
U[7] = 0.0;
U[8] = 1.0;
for (q = 1; q >= 0; q += -1) {
    iter = 3 * q + q;
    if (s[q] != 0.0) {
        for (kase = q + 1; kase + 1 < 4; kase++) {
            qs = (3 * kase + q) + 1;
%if SLibCG_FcnCallArgAccessed(6,34,13,1)
%<SLibCG_AccessArg(6 ,34, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(6,34,13,3)
%<SLibCG_AccessArg(6 ,34, 1)>
%endif

%if SLibCG_FcnCallArgAccessed(6,34,14,1)
%<SLibCG_AccessArg(6 ,34, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(6,34,14,3)
%<SLibCG_AccessArg(6 ,34, 1)>
%endif

            %<(SLibCGCallSubFcn("ctrl_custom_xaxpy_a2f", ["3 - q", "-(%<(SLibCGCallSubFcn("ctrl_custom_xdotc_l", ["3 - q", "U", "iter + 1", "U", "qs"], 6, 34, 13))> / U[iter])", "iter + 1", "U", "qs"], 6, 34, 14))>;
        }
        for (qs = q; qs + 1 < 4; qs++) {
            U[qs + 3 * q] = -U[3 * q + qs];
        }
        U[iter]++;
        iter = 1;
        while (iter <= q) {
            U[3] = 0.0;
            iter = 2;
        }
    } else {
        U[3 * q] = 0.0;
        U[1 + 3 * q] = 0.0;
        U[2 + 3 * q] = 0.0;
        U[iter] = 1.0;
    }
}
for (iter = 11; iter >= 0; iter += -1) {
    if ((iter + 1 <= 3) && (e[iter] != 0.0)) {
        q = (12 * iter + iter) + 2;
        for (qs = iter + 1; qs + 1 < 13; qs++) {
            kase = (12 * qs + iter) + 2;
            %<(SLibCGCallSubFcn("ctrl_custom_xaxpy_a2fbjv1g", ["11 - iter", "-(%<(SLibCGCallSubFcn("ctrl_custom_xdotc_lsov", ["11 - iter", "Vf", "q", "Vf", "kase"], 6, 34, 11))> / Vf[q - 1])", "q", "Vf", "kase"], 6, 34, 12))>;
        }
    }
    memset(&Vf[iter * 12], 0, 12U * sizeof(real_T));
    Vf[iter + 12 * iter] = 1.0;
}
ztest = e[0];
if (s[0] != 0.0) {
    ztest0 = fabs(s[0]);
    snorm = s[0] / ztest0;
    s[0] = ztest0;
    ztest = e[0] / snorm;
%if SLibCG_FcnCallArgAccessed(6,34,28,1)
%<SLibCG_AccessArg(6 ,34, 1)>
%endif

    %<(SLibCGCallSubFcn("ctrl_custom_xscal", ["snorm", "U", "1"], 6, 34, 28))>;
}
if (ztest != 0.0) {
    ztest0 = fabs(ztest);
    snorm = ztest0 / ztest;
    ztest = ztest0;
    s[1] *= snorm;
    %<(SLibCGCallSubFcn("ctrl_custom_xscal_ie", ["snorm", "Vf", "13"], 6, 34, 29))>;
}
e[0] = ztest;
ztest = e[1];
if (s[1] != 0.0) {
    ztest0 = fabs(s[1]);
    snorm = s[1] / ztest0;
    s[1] = ztest0;
    ztest = e[1] / snorm;
%if SLibCG_FcnCallArgAccessed(6,34,30,1)
%<SLibCG_AccessArg(6 ,34, 1)>
%endif

    %<(SLibCGCallSubFcn("ctrl_custom_xscal", ["snorm", "U", "4"], 6, 34, 30))>;
}
if (ztest != 0.0) {
    ztest0 = fabs(ztest);
    snorm = ztest0 / ztest;
    ztest = ztest0;
    s[2] = b_A[8] * snorm;
    %<(SLibCGCallSubFcn("ctrl_custom_xscal_ie", ["snorm", "Vf", "25"], 6, 34, 31))>;
}
e[1] = ztest;
ztest = e[2];
if (s[2] != 0.0) {
    ztest0 = fabs(s[2]);
    snorm = s[2] / ztest0;
    s[2] = ztest0;
    ztest = e[2] / snorm;
%if SLibCG_FcnCallArgAccessed(6,34,32,1)
%<SLibCG_AccessArg(6 ,34, 1)>
%endif

    %<(SLibCGCallSubFcn("ctrl_custom_xscal", ["snorm", "U", "7"], 6, 34, 32))>;
}
if (ztest != 0.0) {
    ztest0 = fabs(ztest);
    snorm = ztest0 / ztest;
    ztest = ztest0;
    s[3] = 0.0 * snorm;
    %<(SLibCGCallSubFcn("ctrl_custom_xscal_ie", ["snorm", "Vf", "37"], 6, 34, 33))>;
}
e[2] = ztest;
e[3] = 0.0;
iter = 0;
snorm = 0.0;
ztest0 = fabs(e[0]);
if ((s[0] >= ztest0) || rtIsNaN(ztest0)) {
    ztest0 = s[0];
}
if (!((0.0 >= ztest0) || rtIsNaN(ztest0))) {
    snorm = ztest0;
}
ztest0 = fabs(e[1]);
if ((s[1] >= ztest0) || rtIsNaN(ztest0)) {
    ztest0 = s[1];
}
if (!((snorm >= ztest0) || rtIsNaN(ztest0))) {
    snorm = ztest0;
}
ztest0 = fabs(ztest);
if ((s[2] >= ztest0) || rtIsNaN(ztest0)) {
    ztest0 = s[2];
}
if (!((snorm >= ztest0) || rtIsNaN(ztest0))) {
    snorm = ztest0;
}
if (s[3] >= 0.0) {
    ztest0 = s[3];
} else {
    ztest0 = 0.0;
}
if (!((snorm >= ztest0) || rtIsNaN(ztest0))) {
    snorm = ztest0;
}
while ((m + 2 > 0) && (!(iter >= 75))) {
    kase = m + 1;
    do {
        exitg3 = 0;
        q = kase;
        if (kase == 0) {
            exitg3 = 1;
        } else {
            ztest0 = fabs(e[kase - 1]);
            if ((ztest0 <= (fabs(s[kase - 1]) + fabs(s[kase])) * 2.2204460492503131E-16) || ((ztest0 <= 1.0020841800044864E-292) || ((iter > 20) && (ztest0 <= 2.2204460492503131E-16 * snorm)))) {
                e[kase - 1] = 0.0;
                exitg3 = 1;
            } else {
                kase--;
            }
        }
    } while (exitg3 == 0);
    if (m + 1 == kase) {
        kase = 4;
    } else {
        qs = m + 2;
        k_ii = m + 2;
        exitg2 = false;
        while ((!exitg2) && (k_ii >= kase)) {
            qs = k_ii;
            if (k_ii == kase) {
                exitg2 = true;
            } else {
                ztest0 = 0.0;
                if (k_ii < m + 2) {
                    ztest0 = fabs(e[k_ii - 1]);
                }
                if (k_ii > kase + 1) {
                    ztest0 += fabs(e[k_ii - 2]);
                }
                ztest = fabs(s[k_ii - 1]);
                if ((ztest <= 2.2204460492503131E-16 * ztest0) || (ztest <= 1.0020841800044864E-292)) {
                    s[k_ii - 1] = 0.0;
                    exitg2 = true;
                } else {
                    k_ii--;
                }
            }
        }
        if (qs == kase) {
            kase = 3;
        } else if (m + 2 == qs) {
            kase = 1;
        } else {
            kase = 2;
            q = qs;
        }
    }
    switch (kase) {
      case 1:
        ztest0 = e[m];
        e[m] = 0.0;
        for (qs = m; qs + 1 >= q + 1; qs--) {
            ztest = s[qs];
            %<(SLibCGCallSubFcn("ctrl_custom_xrotg", ["&ztest", "&ztest0", "&sqds", "&smm1"], 6, 34, 3))>;
            s[qs] = ztest;
            if (qs + 1 > q + 1) {
                ztest0 = e[qs - 1] * -smm1;
                e[qs - 1] *= sqds;
            }
            %<(SLibCGCallSubFcn("ctrl_custom_xrot_nd", ["Vf", "1 + 12 * qs", "1 + 12 * (m + 1)", "sqds", "smm1"], 6, 34, 4))>;
        }
        break;
      case 2:
        ztest0 = e[q - 1];
        e[q - 1] = 0.0;
        for (qs = q; qs + 1 <= m + 2; qs++) {
            ztest = s[qs];
            %<(SLibCGCallSubFcn("ctrl_custom_xrotg", ["&ztest", "&ztest0", "&sqds", "&smm1"], 6, 34, 5))>;
            s[qs] = ztest;
            ztest0 = -smm1 * e[qs];
            e[qs] *= sqds;
%if SLibCG_FcnCallArgAccessed(6,34,6,0)
%<SLibCG_AccessArg(6 ,34, 1)>
%endif

            %<(SLibCGCallSubFcn("ctrl_custom_xrot_n", ["U", "1 + 3 * qs", "1 + 3 * (q - 1)", "sqds", "smm1"], 6, 34, 6))>;
        }
        break;
      case 3:
        varargin_1[0] = fabs(s[m + 1]);
        varargin_1[1] = fabs(s[m]);
        varargin_1[2] = fabs(e[m]);
        varargin_1[3] = fabs(s[q]);
        varargin_1[4] = fabs(e[q]);
        qs = 1;
        ztest = varargin_1[0];
        if (rtIsNaN(varargin_1[0])) {
            kase = 2;
            exitg1 = false;
            while ((!exitg1) && (kase < 6)) {
                qs = kase;
                if (!rtIsNaN(varargin_1[kase - 1])) {
                    ztest = varargin_1[kase - 1];
                    exitg1 = true;
                } else {
                    kase++;
                }
            }
        }
        if (qs < 5) {
            while (qs + 1 < 6) {
                if (varargin_1[qs] > ztest) {
                    ztest = varargin_1[qs];
                }
                qs++;
            }
        }
        ztest0 = s[m + 1] / ztest;
        smm1 = s[m] / ztest;
        emm1 = e[m] / ztest;
        sqds = s[q] / ztest;
        smm1 = ((smm1 + ztest0) * (smm1 - ztest0) + emm1 * emm1) / 2.0;
        emm1 *= ztest0;
        emm1 *= emm1;
        if ((smm1 != 0.0) || (emm1 != 0.0)) {
            shift = sqrt(smm1 * smm1 + emm1);
            if (smm1 < 0.0) {
                shift = -shift;
            }
            shift = emm1 / (smm1 + shift);
        } else {
            shift = 0.0;
        }
        ztest0 = (sqds + ztest0) * (sqds - ztest0) + shift;
        ztest = e[q] / ztest * sqds;
        for (qs = q + 1; qs <= m + 1; qs++) {
            %<(SLibCGCallSubFcn("ctrl_custom_xrotg", ["&ztest0", "&ztest", "&sqds", "&smm1"], 6, 34, 7))>;
            if (qs > q + 1) {
                e[qs - 2] = ztest0;
            }
            ztest0 = s[qs - 1] * sqds + e[qs - 1] * smm1;
            e[qs - 1] = e[qs - 1] * sqds - s[qs - 1] * smm1;
            ztest = smm1 * s[qs];
            s[qs] *= sqds;
            %<(SLibCGCallSubFcn("ctrl_custom_xrot_nd", ["Vf", "1 + 12 * (qs - 1)", "1 + 12 * qs", "sqds", "smm1"], 6, 34, 8))>;
            %<(SLibCGCallSubFcn("ctrl_custom_xrotg", ["&ztest0", "&ztest", "&sqds", "&smm1"], 6, 34, 9))>;
            s[qs - 1] = ztest0;
            ztest0 = e[qs - 1] * sqds + smm1 * s[qs];
            s[qs] = e[qs - 1] * -smm1 + sqds * s[qs];
            ztest = smm1 * e[qs];
            e[qs] *= sqds;
            if (qs < 3) {
%if SLibCG_FcnCallArgAccessed(6,34,10,0)
%<SLibCG_AccessArg(6 ,34, 1)>
%endif

                %<(SLibCGCallSubFcn("ctrl_custom_xrot_n", ["U", "1 + 3 * (qs - 1)", "1 + 3 * qs", "sqds", "smm1"], 6, 34, 10))>;
            }
        }
        e[m] = ztest0;
        iter++;
        break;
      default:
        if (s[q] < 0.0) {
            s[q] = -s[q];
            %<(SLibCGCallSubFcn("ctrl_custom_xscal_ie", ["-1.0", "Vf", "1 + 12 * q"], 6, 34, 0))>;
        }
        iter = q + 1;
        while ((q + 1 < 4) && (s[q] < s[iter])) {
            ztest0 = s[q];
            s[q] = s[iter];
            s[iter] = ztest0;
            %<(SLibCGCallSubFcn("ctrl_custom_xswap_cs", ["Vf", "1 + 12 * q", "1 + 12 * (q + 1)"], 6, 34, 1))>;
            if (q + 1 < 3) {
%if SLibCG_FcnCallArgAccessed(6,34,2,0)
%<SLibCG_AccessArg(6 ,34, 1)>
%endif

                %<(SLibCGCallSubFcn("ctrl_custom_xswap_c", ["U", "1 + 3 * q", "1 + 3 * (q + 1)"], 6, 34, 2))>;
            }
            q = iter;
            iter++;
        }
        iter = 0;
        m--;
        break;
    }
}
for (m = 0; m < 3; m++) {
    work[m] = s[m];
    memcpy(&V[m * 12], &Vf[m * 12], 12U * sizeof(real_T));
}
memset(&S[0], 0, 9U * sizeof(real_T));
S[0] = work[0];
S[4] = work[1];
S[8] = work[2];
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_svd_hb2(\
%assign comma = ""
%<comma>const real_T A[36]\
%assign comma = ", "
%<comma>real_T U[9]\
%assign comma = ", "
%<comma>real_T S[9]\
%assign comma = ", "
%<comma>real_T V[36]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 34, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_svd_hb_Fcn35(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
boolean_T b_p;
int32_T k;
%assign _modelSS = ""

b_p = true;
for (k = 0; k < 36; k++) {
    if (b_p && ((!rtIsInf(A[k])) && (!rtIsNaN(A[k])))) {
    } else {
        b_p = false;
    }
}
if (b_p) {
%if SLibCG_FcnCallArgAccessed(6,35,0,0)
%<SLibCG_AccessArg(6 ,35, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(6,35,0,1)
%<SLibCG_AccessArg(6 ,35, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(6,35,0,2)
%<SLibCG_AccessArg(6 ,35, 2)>
%endif
%if SLibCG_FcnCallArgAccessed(6,35,0,3)
%<SLibCG_AccessArg(6 ,35, 3)>
%endif

    %<(SLibCGCallSubFcn("ctrl_custom_svd_hb2", ["A", "U", "S", "V"], 6, 35, 0))>;
} else {
    for (k = 0; k < 9; k++) {
        U[k] = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
        S[k] = 0.0;
    }
    S[0] = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
    S[4] = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
    S[8] = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
    for (k = 0; k < 36; k++) {
        V[k] = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_svd_hb(\
%assign comma = ""
%<comma>const real_T A[36]\
%assign comma = ", "
%<comma>real_T U[9]\
%assign comma = ", "
%<comma>real_T S[9]\
%assign comma = ", "
%<comma>real_T V[36]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 35, fcnProtoType)>
%return fcnBuff
%endfunction

%function rt_atan2d_snf_Fcn36(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T y;
int32_T u0_0;
int32_T u1_0;
if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
} else if (rtIsInf(u0) && rtIsInf(u1)) {
    if (u0 > 0.0) {
        u0_0 = 1;
    } else {
        u0_0 = -1;
    }
    if (u1 > 0.0) {
        u1_0 = 1;
    } else {
        u1_0 = -1;
    }
    y = atan2(u0_0, u1_0);
} else if (u1 == 0.0) {
    if (u0 > 0.0) {
        y = RT_PI / 2.0;
    } else if (u0 < 0.0) {
        y = -(RT_PI / 2.0);
    } else {
        y = 0.0;
    }
} else {
    y = atan2(u0, u1);
}
return y;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
extern real_T rt_atan2d_snf(\
%assign comma = ""
%<comma>real_T u0\
%assign comma = ", "
%<comma>real_T u1\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 36, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_abs_Fcn37(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
y[0] = fabs(x[0]);
y[1] = fabs(x[1]);
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_abs(\
%assign comma = ""
%<comma>const real_T x[2]\
%assign comma = ", "
%<comma>real_T y[2]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 37, fcnProtoType)>
%return fcnBuff
%endfunction

%function rt_powd_snf_Fcn38(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T y;
real_T tmp;
real_T tmp_0;
if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
} else {
    tmp = fabs(u0);
    tmp_0 = fabs(u1);
    if (rtIsInf(u1)) {
        if (tmp == 1.0) {
            y = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
        } else if (tmp > 1.0) {
            if (u1 > 0.0) {
                y = %<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>;
            } else {
                y = 0.0;
            }
        } else if (u1 > 0.0) {
            y = 0.0;
        } else {
            y = %<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>;
        }
    } else if (tmp_0 == 0.0) {
        y = 1.0;
    } else if (tmp_0 == 1.0) {
        if (u1 > 0.0) {
            y = u0;
        } else {
            y = 1.0 / u0;
        }
    } else if (u1 == 2.0) {
        y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
        y = sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
        y = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
    } else {
        y = pow(u0, u1);
    }
}
return y;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
extern real_T rt_powd_snf(\
%assign comma = ""
%<comma>real_T u0\
%assign comma = ", "
%<comma>real_T u1\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 38, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_cosd_Fcn39(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int8_T n;
real_T b_x;
real_T absx;
%assign _modelSS = ""

if (!((!rtIsInf(*x)) && (!rtIsNaN(*x)))) {
    *x = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
} else {
%if SLibCG_FcnCallArgAccessed(6,39,0,0)
%<SLibCG_AccessArg(6 ,39, 0)>
%endif

    b_x = %<(SLibCGCallSubFcn("rt_remd_snf", ["*x", "360.0"], 6, 39, 0))>;
    absx = fabs(b_x);
    if (absx > 180.0) {
        if (b_x > 0.0) {
            b_x -= 360.0;
        } else {
            b_x += 360.0;
        }
        absx = fabs(b_x);
    }
    if (absx <= 45.0) {
        b_x *= 0.017453292519943295;
        n = 0;
    } else if (absx <= 135.0) {
        if (b_x > 0.0) {
            b_x = (b_x - 90.0) * 0.017453292519943295;
            n = 1;
        } else {
            b_x = (b_x + 90.0) * 0.017453292519943295;
            n = -1;
        }
    } else if (b_x > 0.0) {
        b_x = (b_x - 180.0) * 0.017453292519943295;
        n = 2;
    } else {
        b_x = (b_x + 180.0) * 0.017453292519943295;
        n = -2;
    }
    if (n == 0) {
        *x = cos(b_x);
    } else if (n == 1) {
        *x = -sin(b_x);
    } else if (n == -1) {
        *x = sin(b_x);
    } else {
        *x = -cos(b_x);
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_cosd(\
%assign comma = ""
%<comma>real_T *x\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 39, fcnProtoType)>
%return fcnBuff
%endfunction

%function ctrl_custom_sind_Fcn40(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int8_T n;
real_T c_x;
real_T absx;
%assign _modelSS = ""

if (!((!rtIsInf(*x)) && (!rtIsNaN(*x)))) {
    c_x = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
} else {
%if SLibCG_FcnCallArgAccessed(6,40,0,0)
%<SLibCG_AccessArg(6 ,40, 0)>
%endif

    c_x = %<(SLibCGCallSubFcn("rt_remd_snf", ["*x", "360.0"], 6, 40, 0))>;
    absx = fabs(c_x);
    if (absx > 180.0) {
        if (c_x > 0.0) {
            c_x -= 360.0;
        } else {
            c_x += 360.0;
        }
        absx = fabs(c_x);
    }
    if (absx <= 45.0) {
        c_x *= 0.017453292519943295;
        n = 0;
    } else if (absx <= 135.0) {
        if (c_x > 0.0) {
            c_x = (c_x - 90.0) * 0.017453292519943295;
            n = 1;
        } else {
            c_x = (c_x + 90.0) * 0.017453292519943295;
            n = -1;
        }
    } else if (c_x > 0.0) {
        c_x = (c_x - 180.0) * 0.017453292519943295;
        n = 2;
    } else {
        c_x = (c_x + 180.0) * 0.017453292519943295;
        n = -2;
    }
    if (n == 0) {
        c_x = sin(c_x);
    } else if (n == 1) {
        c_x = cos(c_x);
    } else if (n == -1) {
        c_x = -cos(c_x);
    } else {
        c_x = -sin(c_x);
    }
}
*x = c_x;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ctrl_custom_sind(\
%assign comma = ""
%<comma>real_T *x\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(6, 40, fcnProtoType)>
%return fcnBuff
%endfunction

